
 /*Generated by node-express website
 @file webone
 @author TimYao <tmwoman@yeah.net>
 @version 2015071022

 Development of the underlying
 node express ejs
 */

 var express = require('express'),
     bodyParder = require('body-parser'),    //参数处理 form 表单的参数处理
     cookie = require('cookie-parser'),      //cookie 
     sesstion = require('express-session'),  //session
     logger = require('morgan'),   //日志1
     timeout = require('timeout'), //延时用法
     //multer = require('multer');   //上传
     multer = require('multer'),
     upload = multer({ dest: './public/upload' }),
     session = require('express-session'),
     favicon = require('express-favicon'),
     browserSync = require('browser-sync'),
     MongoStore = require('connect-mongo')(session),
     methodOverride = require('method-override'),
     fs = require('fs'),
     util = require('util'),
     routers = require('./routers/routers.js'),
     admin = require('./routers/admin.js'),
     app = express(),
     port = process.env.PORT || 1000,
     host = '127.0.0.1',
     dirname = __dirname,
     platform = process.platform,
     time = 5000,
     logdir = dirname+'/logs',
     env = app.get('env').toLowerCase() === 'development' ? 'development' : 'production',
     systems = {
     	 "win":"win"
     };

/**
 bodyParder.urlencoded解析 application/x-www-urlencode 默认的form解析 ,后台并已参数拼接方式处理，最后转换为json对象格式返回
     一种提交普通的参数
     一种上传图片，需要设置表单的enctype multipart  这是一传大文件需求非asii码格式文件
   
 bodyParder.json()  针对解析JSON方式POST提交，通过ajax请求，设置请求的Content-Type 来告诉服务器解析的格式,最后转换为json对象返回


  
 模板设置 
 app.engine('.html',ejs.renderFile)  //更改后缀名为.html但已ejs模板引擎解析
 app.set("view engine","html")  //模板格式

  设置
  静态目录
  app.use(require('express')().static('public/'))

  cookie 
  cookie-parser cookie签名安全
  express-session  (内存，缓存，数据库)存储
  cookie 一帮存储在客户端 
    当请求是，服务器会返回一个setcookie,生成客户端cookie，每次请求都会检查是否存在，并再发回服务器端，返回上次记录位置

  express-favicon  创建收藏图标 


**/


//设置
app.set("view engine","ejs");
app.set("views",dirname+checkPlat(platform)+'views');
app.set('view options',{layout:false});



app.use(bodyParder.json());
app.use(bodyParder.urlencoded({extended:true}));  
app.use(cookie());
app.use(session({
  secret: 'cookie_secret',
  key:'_tim',
  cookie:{
    maxAge:7*60*60*24*1000,
  },
  resave: false,
  saveUninitialized: false,
  store : new MongoStore({
      db:'blog',
      autoRemove: 'native'
  })
}));
app.use(favicon(dirname+checkPlat(platform)+'public'+checkPlat(platform)+'images'+checkPlat(platform)+'favicon.ico'));
app.use(methodOverride(function(req,res){
     if(req.body && typeof req.body === 'object' && '_method' in req.body)
     {   
         var method = req.body._method;
         delete req.body._method;
         return method;   
     }
}));

//log日志
app.use(logger('dev'));
app.use(logger('dev',{stream:logstream()})).use(function(req,res,next){
  if(res.statusCode!=200)
  {
     setTimeout(function(){
        res.end('server is Delay!');
        return false;
     },time);
  }else{
     next();
  }
});



//路由、模板指定
app.use('/static',express.static(dirname+'/public'));
app.use('/blog',routers);
app.use('/admin',admin);


//错误处理
app.use(function(req,res,next){
   var err = new Error('no Found');
   err.status = 404;
   if(err)
   {
      res.end('no Found view!');
      return false;
   }else{
   	  next();
   } 
});


app.post('/admin/index',multer,function(req,res,next){
     viewmessages.view = "admin"; 
     //alldates = {};
     //alldates['view'] = 'display';
     //console.log(req.body);
     
     res.render('index',{viewmessages:viewmessages});
});


//开发模式和生产模式
if(env==="development")
{
   app.use(function(req,res,next){

   }); 
}else{
   app.use(function(req,res,next){

   });
}

app.listen(port,function(){
	console.log('start is success');
});


//检验系统模式，对目录格式处理
function checkPlat(platform)
{
    var plt = platform.toString().toLowerCase(),
        direxc = '/';
    eval("/"+systems.win+"/").test(plt) ? (direxc="\\") : direxc;
    return direxc;
}
//日志写入
function logstream()
{ 
   //创建日志目录
   fs.existsSync(logdir) || fs.mkdirSync(logdir);
   var lastlog = fs.createWriteStream(logdir+'/access.log',{flags:'a',encoding:'utf8'});
   return lastlog;
}


function browserSyncFun(next)
{
   var bs = browserSync.create();
   bs.init({
       server:{
         baseDir:'./'
       },
       ui: {
         port: port
       },
       proxy:host+'/blog',
       port:port,
       logLevel: "silent",
       files:[dirname+'/views/*',dirname+'public/**/*',dirname+'/routers/*.js']
   });
   bs.watch(dirname).on('change',bs.reload);
   next();
}

/* 
问题：
1、关于对start启动的问题
2、能否页面在重启后自动更新
